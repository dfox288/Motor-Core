<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;
use DummyRootNamespaceDummyModel;
use DummyRootNamespaceHttp\Requests\Backend\DummyRequest;
use DummyRootNamespaceGrids\DummyGrid;
use Kris\LaravelFormBuilder\FormBuilderTrait;
use App\Forms\Backend\DummyForm;

class DummyClass extends Controller
{
    use FormBuilderTrait;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $grid      = new DummyGrid(DummyModel::class);
        $paginator = $grid->getPaginator();

        return view('backend.DummyView.index', compact('paginator', 'grid'));
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $form = $this->form(DummyForm::class, [
            'method'  => 'POST',
            'route'   => 'backend.DummyView.store',
            'enctype' => 'multipart/form-data'
        ]);

        return view('backend.DummyView.create', compact('form'));
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function store(DummyRequest $request)
    {
        $form = $this->form(DummyForm::class);

        // It will automatically use current request, get the rules, and do the validation
        if ( ! $form->isValid()) {
            return redirect()->back()->withErrors($form->getErrors())->withInput();
        }

        $record = new DummyModel($this->handleInputValues($form, $request->all()));
        $record->save();

        flash()->success(trans('backend/DummyView.created'));

        return redirect('backend/DummyView');
    }


    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }


    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit(DummyModel $record)
    {
        $form = $this->form(DummyForm::class, [
            'method'  => 'PATCH',
            'url'     => route('backend.DummyView.update', [ $record->id ]),
            'enctype' => 'multipart/form-data',
            'model'   => $record
        ]);

        return view('backend.DummyView.edit', compact('form'));
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  int                      $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(DummyRequest $request, DummyModel $record)
    {
        $form = $this->form(DummyForm::class);

        // It will automatically use current request, get the rules, and do the validation
        if ( ! $form->isValid()) {
            return redirect()->back()->withErrors($form->getErrors())->withInput();
        }

        $record->update($this->handleInputValues($form, $request->all()));

        flash()->success(trans('backend/DummyView.updated'));

        return redirect('backend/DummyView');
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(DummyModel $record)
    {
        $record->delete();

        flash()->success(trans('backend/DummyView.deleted'));

        return redirect('backend/DummyView');
    }
}
